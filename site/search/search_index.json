{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started \u00b6 Inspired by Netmiko , Asynchronet is a multi-vendor library for asynchronously interacting with network devices through the CLI. Asynchronet is a fork of Netdev , which is no longer maintained. This project was forked to continue to expand and enhance the existing capabilities while enabling community contribution. The key features are: Asynchronous CLI Interactions : Thanks to asyncssh , which powers asynchronet provides support for multiple SSH connections within a single event loop. Multi-Vendor Support : Currently twelve of the most popular networking hardware vendors are supported, with more to be added in the future. Autodetect Device Type : By porting Netmiko's battle-tested SSHDetect class to work asynchronously with asyncssh , asynchronet makes automatic device type detection a breeze. Simple : Intuitive classes make it easy to interact with your favorite flavor of device. Installation \u00b6 with pip recommended \u00b6 $ pip install asynchronet ---> 100% Quick Start \u00b6 Example \u00b6 import asyncio import asynchronet async def task ( param ): async with asynchronet . create ( ** param ) as ios : # Send a simple command out = await ios . send_command ( \"show ver\" ) print ( out ) # Send a full configuration set commands = [ \"line console 0\" , \"exit\" ] out = await ios . send_config_set ( commands ) print ( out ) # Send a command with a long output out = await ios . send_command ( \"show run\" ) print ( out ) # Interactive dialog out = await ios . send_command ( \"conf\" , pattern = r \"\\[terminal\\]\\?\" , strip_command = False ) out += await ios . send_command ( \"term\" , strip_command = False ) out += await ios . send_command ( \"exit\" , strip_command = False , strip_prompt = False ) print ( out ) async def run (): device_1 = { \"username\" : \"user\" , \"password\" : \"pass\" , \"device_type\" : \"cisco_ios\" , \"host\" : \"ip address\" , } device_2 = { \"username\" : \"user\" , \"password\" : \"pass\" , \"device_type\" : \"cisco_ios\" , \"host\" : \"ip address\" , } devices = [ device_1 , device_2 ] tasks = [ task ( device ) for device in devices ] await asyncio . wait ( tasks ) loop = asyncio . get_event_loop () loop . run_until_complete ( run ())","title":"Installation"},{"location":"#getting-started","text":"Inspired by Netmiko , Asynchronet is a multi-vendor library for asynchronously interacting with network devices through the CLI. Asynchronet is a fork of Netdev , which is no longer maintained. This project was forked to continue to expand and enhance the existing capabilities while enabling community contribution. The key features are: Asynchronous CLI Interactions : Thanks to asyncssh , which powers asynchronet provides support for multiple SSH connections within a single event loop. Multi-Vendor Support : Currently twelve of the most popular networking hardware vendors are supported, with more to be added in the future. Autodetect Device Type : By porting Netmiko's battle-tested SSHDetect class to work asynchronously with asyncssh , asynchronet makes automatic device type detection a breeze. Simple : Intuitive classes make it easy to interact with your favorite flavor of device.","title":"Getting Started"},{"location":"#installation","text":"","title":"Installation"},{"location":"#with-pip","text":"$ pip install asynchronet ---> 100%","title":"with pip"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#example","text":"import asyncio import asynchronet async def task ( param ): async with asynchronet . create ( ** param ) as ios : # Send a simple command out = await ios . send_command ( \"show ver\" ) print ( out ) # Send a full configuration set commands = [ \"line console 0\" , \"exit\" ] out = await ios . send_config_set ( commands ) print ( out ) # Send a command with a long output out = await ios . send_command ( \"show run\" ) print ( out ) # Interactive dialog out = await ios . send_command ( \"conf\" , pattern = r \"\\[terminal\\]\\?\" , strip_command = False ) out += await ios . send_command ( \"term\" , strip_command = False ) out += await ios . send_command ( \"exit\" , strip_command = False , strip_prompt = False ) print ( out ) async def run (): device_1 = { \"username\" : \"user\" , \"password\" : \"pass\" , \"device_type\" : \"cisco_ios\" , \"host\" : \"ip address\" , } device_2 = { \"username\" : \"user\" , \"password\" : \"pass\" , \"device_type\" : \"cisco_ios\" , \"host\" : \"ip address\" , } devices = [ device_1 , device_2 ] tasks = [ task ( device ) for device in devices ] await asyncio . wait ( tasks ) loop = asyncio . get_event_loop () loop . run_until_complete ( run ())","title":"Example"},{"location":"quick-start/","text":"Create Device Inventory \u00b6 Create a simple dictionary representing the device you plan to manage. import asyncio import asynchronet","title":"Quick Start"},{"location":"quick-start/#create-device-inventory","text":"Create a simple dictionary representing the device you plan to manage. import asyncio import asynchronet","title":"Create Device Inventory"},{"location":"reference/","text":"Code Reference \u00b6 asynchronet . create ( * args , ** kwargs ) \u00b6 Selects the proper vendor and creates an object based on device_type Selects the proper class and creates a device object based on the device_type argument. Other Parameters: Name Type Description **host device hostname or ip address for connection **username username for logging to device **password user password for logging to device **port ssh port for connection. Default is 22 **device_type network device type **timeout timeout in second for getting information from channel **loop asyncio loop object **known_hosts file with known hosts. Default is None (no policy). With () it will use default file **local_addr local address for binding source of tcp connection **client_keys path for client keys. Default in None. With () it will use default file in OS **passphrase password for encrypted client keys **tunnel An existing SSH connection that this new connection should be tunneled over **pattern pattern for searching the end of device prompt. Example: r\"{hostname}. ?((. ?))?[{delimeters}]\" **agent_forwarding Allow or not allow agent forward for server **agent_path The path of a UNIX domain socket to use to contact an ssh-agent process which will perform the operations needed for client public key authentication. If this is not specified and the environment variable SSH_AUTH_SOCK is set, its value will be used as the path. If client_keys is specified or this argument is explicitly set to None , an ssh-agent will not be used. **client_version version which advertised to ssh server **family The address family to use when creating the socket. By default, the address family is automatically selected based on the host. **kex_algs A list of allowed key exchange algorithms in the SSH handshake, taken from key exchange algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#kexalgs> _ **encryption_algs A list of encryption algorithms to use during the SSH handshake, taken from encryption algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#encryptionalgs> _ **mac_algs A list of MAC algorithms to use during the SSH handshake, taken from MAC algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#macalgs> _ **compression_algs A list of compression algorithms to use during the SSH handshake, taken from compression algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#compressionalgs> _, or None to disable compression **signature_algs A list of public key signature algorithms to use during the SSH handshake, taken from signature algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#signaturealgs> _ **server_host_key_algs A list of server host key algorithms to allow during the SSH handshake, taken from server host key algorithms. https://asyncssh.readthedocs.io/en/latest/api.html#publickeyalgs Source code in asynchronet/dispatcher.py def create ( * args , ** kwargs ): \"\"\"Selects the proper vendor and creates an object based on device_type Selects the proper class and creates a device object based on the device_type argument. Other parameters: **host: device hostname or ip address for connection **username: username for logging to device **password: user password for logging to device **port: ssh port for connection. Default is 22 **device_type: network device type **timeout: timeout in second for getting information from channel **loop: asyncio loop object **known_hosts: file with known hosts. Default is None (no policy). With () it will use default file **local_addr: local address for binding source of tcp connection **client_keys: path for client keys. Default in None. With () it will use default file in OS **passphrase: password for encrypted client keys **tunnel: An existing SSH connection that this new connection should be tunneled over **pattern: pattern for searching the end of device prompt. Example: r\"{hostname}.*?(\\(.*?\\))?[{delimeters}]\" **agent_forwarding: Allow or not allow agent forward for server **agent_path: The path of a UNIX domain socket to use to contact an ssh-agent process which will perform the operations needed for client public key authentication. If this is not specified and the environment variable `SSH_AUTH_SOCK` is set, its value will be used as the path. If `client_keys` is specified or this argument is explicitly set to `None`, an ssh-agent will not be used. **client_version: version which advertised to ssh server **family: The address family to use when creating the socket. By default, the address family is automatically selected based on the host. **kex_algs: A list of allowed key exchange algorithms in the SSH handshake, taken from `key exchange algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#kexalgs>`_ **encryption_algs: A list of encryption algorithms to use during the SSH handshake, taken from `encryption algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#encryptionalgs>`_ **mac_algs: A list of MAC algorithms to use during the SSH handshake, taken from `MAC algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#macalgs>`_ **compression_algs: A list of compression algorithms to use during the SSH handshake, taken from `compression algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#compressionalgs>`_, or `None` to disable compression **signature_algs: A list of public key signature algorithms to use during the SSH handshake, taken from `signature algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#signaturealgs>`_ **server_host_key_algs: A list of server host key algorithms to allow during the SSH handshake, taken from server host key algorithms. https://asyncssh.readthedocs.io/en/latest/api.html#publickeyalgs \"\"\" if kwargs [ \"device_type\" ] not in platforms : raise ValueError ( f \"Unsupported device_type: \" f \"currently supported platforms are: { platforms_str } \" ) connection_class = CLASS_MAPPER [ kwargs [ \"device_type\" ]] return connection_class ( * args , ** kwargs )","title":"Code Reference"},{"location":"reference/#code-reference","text":"","title":"Code Reference"},{"location":"reference/#asynchronet.create","text":"Selects the proper vendor and creates an object based on device_type Selects the proper class and creates a device object based on the device_type argument. Other Parameters: Name Type Description **host device hostname or ip address for connection **username username for logging to device **password user password for logging to device **port ssh port for connection. Default is 22 **device_type network device type **timeout timeout in second for getting information from channel **loop asyncio loop object **known_hosts file with known hosts. Default is None (no policy). With () it will use default file **local_addr local address for binding source of tcp connection **client_keys path for client keys. Default in None. With () it will use default file in OS **passphrase password for encrypted client keys **tunnel An existing SSH connection that this new connection should be tunneled over **pattern pattern for searching the end of device prompt. Example: r\"{hostname}. ?((. ?))?[{delimeters}]\" **agent_forwarding Allow or not allow agent forward for server **agent_path The path of a UNIX domain socket to use to contact an ssh-agent process which will perform the operations needed for client public key authentication. If this is not specified and the environment variable SSH_AUTH_SOCK is set, its value will be used as the path. If client_keys is specified or this argument is explicitly set to None , an ssh-agent will not be used. **client_version version which advertised to ssh server **family The address family to use when creating the socket. By default, the address family is automatically selected based on the host. **kex_algs A list of allowed key exchange algorithms in the SSH handshake, taken from key exchange algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#kexalgs> _ **encryption_algs A list of encryption algorithms to use during the SSH handshake, taken from encryption algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#encryptionalgs> _ **mac_algs A list of MAC algorithms to use during the SSH handshake, taken from MAC algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#macalgs> _ **compression_algs A list of compression algorithms to use during the SSH handshake, taken from compression algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#compressionalgs> _, or None to disable compression **signature_algs A list of public key signature algorithms to use during the SSH handshake, taken from signature algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#signaturealgs> _ **server_host_key_algs A list of server host key algorithms to allow during the SSH handshake, taken from server host key algorithms. https://asyncssh.readthedocs.io/en/latest/api.html#publickeyalgs Source code in asynchronet/dispatcher.py def create ( * args , ** kwargs ): \"\"\"Selects the proper vendor and creates an object based on device_type Selects the proper class and creates a device object based on the device_type argument. Other parameters: **host: device hostname or ip address for connection **username: username for logging to device **password: user password for logging to device **port: ssh port for connection. Default is 22 **device_type: network device type **timeout: timeout in second for getting information from channel **loop: asyncio loop object **known_hosts: file with known hosts. Default is None (no policy). With () it will use default file **local_addr: local address for binding source of tcp connection **client_keys: path for client keys. Default in None. With () it will use default file in OS **passphrase: password for encrypted client keys **tunnel: An existing SSH connection that this new connection should be tunneled over **pattern: pattern for searching the end of device prompt. Example: r\"{hostname}.*?(\\(.*?\\))?[{delimeters}]\" **agent_forwarding: Allow or not allow agent forward for server **agent_path: The path of a UNIX domain socket to use to contact an ssh-agent process which will perform the operations needed for client public key authentication. If this is not specified and the environment variable `SSH_AUTH_SOCK` is set, its value will be used as the path. If `client_keys` is specified or this argument is explicitly set to `None`, an ssh-agent will not be used. **client_version: version which advertised to ssh server **family: The address family to use when creating the socket. By default, the address family is automatically selected based on the host. **kex_algs: A list of allowed key exchange algorithms in the SSH handshake, taken from `key exchange algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#kexalgs>`_ **encryption_algs: A list of encryption algorithms to use during the SSH handshake, taken from `encryption algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#encryptionalgs>`_ **mac_algs: A list of MAC algorithms to use during the SSH handshake, taken from `MAC algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#macalgs>`_ **compression_algs: A list of compression algorithms to use during the SSH handshake, taken from `compression algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#compressionalgs>`_, or `None` to disable compression **signature_algs: A list of public key signature algorithms to use during the SSH handshake, taken from `signature algorithms <https://asyncssh.readthedocs.io/en/latest/api.html#signaturealgs>`_ **server_host_key_algs: A list of server host key algorithms to allow during the SSH handshake, taken from server host key algorithms. https://asyncssh.readthedocs.io/en/latest/api.html#publickeyalgs \"\"\" if kwargs [ \"device_type\" ] not in platforms : raise ValueError ( f \"Unsupported device_type: \" f \"currently supported platforms are: { platforms_str } \" ) connection_class = CLASS_MAPPER [ kwargs [ \"device_type\" ]] return connection_class ( * args , ** kwargs )","title":"create()"},{"location":"tutorial/","text":"User Guide - Intro Tutorial \u00b6 This tutorial will show you how to use Asynchronet with most of its current features. Because Asynchronet is very flexible and extensible, there are many ways to accomplish the same outcome. Feel free to use this User Guide as a reference for your own projects.","title":"User Guide - Tutorial"},{"location":"tutorial/#user-guide-intro-tutorial","text":"This tutorial will show you how to use Asynchronet with most of its current features. Because Asynchronet is very flexible and extensible, there are many ways to accomplish the same outcome. Feel free to use this User Guide as a reference for your own projects.","title":"User Guide - Intro Tutorial"}]}